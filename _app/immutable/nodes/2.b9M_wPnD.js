import{s as Y,n as q}from"../chunks/scheduler.BRW4IjsR.js";import{S as Z,i as ee,s as l,e as n,k as te,d as a,f as o,c as s,l as r,m as R,g as i}from"../chunks/index.yRNBcVz4.js";import{b as K}from"../chunks/paths.I5prkiXN.js";import{B as ae}from"../chunks/beluga-med.ovqLOJHh.js";function ie(X){let T,u,A=`<img class="float-start" alt="Beluga Logo" src="${ae}"/> <div class="lead">Beluga is a functional programming language designed for reasoning about formal systems. It
		features direct support for object-level binding constructs using higher order abstract syntax
		and treats contexts as first class objects.</div> <div class="list-group list-group-horizontal-md my-2" role="group"><a href="#overview" class="list-group-item list-group-item-action" role="button">Overview</a> <a href="#installation" class="list-group-item list-group-item-action" role="button">Installation</a> <a href="documentation" class="list-group-item list-group-item-action" role="button">Documentation</a></div>`,P,c,E="Overview",B,m,F=`Beluga allows specification of formal systems (such as lambda calculi and type systems) using a
	foundation of contextual modal logic. As in the Twelf system, we can encode object-level binding
	constructs using higher order abstract syntax. We also pair terms with the contexts that give them
	meaning and then reason about these contextual objects. Proofs in Beluga are represented by
	recursive programs according to the Curry-Howard Isomorphism.`,M,h,N=`Beluga is developed at the Complogic group at McGill University, led by Professor Brigitte
	Pientka. It is implemented in OCaml.`,k,p,O=`To learn more about Beluga we recommend the following tutorial style papers and talks. If you have
	trouble discerning Beluga code from older releases, consult the <a href="${K}/changes">legacy syntax</a> for clarification.`,w,d,G="Tutorial:",_,f,U=`<li><a href="${K}/beluga-tutorial.pdf">Mechanizing Meta-Theory in Beluga</a> (CADE-25 Tutorial), August
		2015</li> <li><a href="https://github.com/Beluga-lang/Meta">Mechanizing Types and Programming Languages: A Companion</a>: This is a companion that loosely follows B. Pierce&#39;s book &quot;Types and Programming Languages&quot;
		and shows how to mechanize the material in Beluga. The code to the companion is available on
		GitHub (see
		<a href="https://github.com/Beluga-lang/Meta/tree/master/beluga-code">beluga-code</a>)
		<br/>For an up-to-date version or to contribute see our
		<a href="https://github.com/Beluga-lang/Meta">GitHub</a>
		repository.<br/></li>`,L,v,W="Overview Talks:",H,b,D=`<li><a href="http://www.cs.mcgill.ca/~bpientka/talks/beluga-mechanize-june15.pdf">Mechanizing Meta-Theory in Beluga</a>, 2nd International Workshop on Rewriting Techniques for Program Transformations and Evaluation
		(WPTE 2015), June 2015</li> <li>Programming logical relations proofs, Brigitte Pientka, <a href="https://ihp2014.pps.univ-paris-diderot.fr/doku.php?id=workshop_5">Certification of high-level and low-level programs</a>, Institut Henri Poincare, Paris, France, June 2014 (<a href="http://cs.mcgill.ca/~bpientka/talks/beluga-logrel.pdf">slides</a>)</li> <li>Beluga-mu: Programming proofs in context, Brigitte Pientka, POP Seminar, Carnegie Mellon
		University, May 2014 (<a href="http://cs.mcgill.ca/~bpientka/talks/beluga-update-May14.pdf">slides</a>)</li> <li>Beluga-mu: Programming proofs in context, Brigitte Pientka, Invited talk at <a href="http://people.csail.mit.edu/adamc/lfmtp12/index.html">International Workshop on Logical Frameworks and Meta-Languages: Theory and Practice
			(LFMTP&#39;12)</a>. (<a href="http://cs.mcgill.ca/~bpientka/talks/beluga-lfmtp12-updated.pdf">slides</a>)</li>`,I,g,$="Installation",z,x,J='Please refer to the installation guide in the GitHub repository of Beluga:<br/> <a href="https://github.com/Beluga-lang/Beluga/blob/master/INSTALL">https://github.com/Beluga-lang/Beluga/blob/master/INSTALL</a>.',j,C,Q="Funding",S,y,V=`This research has been funded through: NSERC (Natural Science and Engineering Research Council),
	FRQNT Recherche d'Équipe, PSR-SIIRI Projets conjoints de recherche et d'innovation and 63e session
	de la Commission permanente de coopération franco-québécoise by Ministère de l'Économie, de
	l'Innovation et de l'Énergie au Quebec.`;return{c(){T=l(),u=n("div"),u.innerHTML=A,P=l(),c=n("h2"),c.textContent=E,B=l(),m=n("p"),m.textContent=F,M=l(),h=n("p"),h.textContent=N,k=l(),p=n("p"),p.innerHTML=O,w=l(),d=n("h4"),d.textContent=G,_=l(),f=n("ul"),f.innerHTML=U,L=l(),v=n("h4"),v.textContent=W,H=l(),b=n("ul"),b.innerHTML=D,I=l(),g=n("h2"),g.textContent=$,z=l(),x=n("p"),x.innerHTML=J,j=l(),C=n("h2"),C.textContent=Q,S=l(),y=n("p"),y.textContent=V,this.h()},l(e){te("svelte-q0o78i",document.head).forEach(a),T=o(e),u=s(e,"DIV",{class:!0,"data-svelte-h":!0}),r(u)!=="svelte-1xuacf3"&&(u.innerHTML=A),P=o(e),c=s(e,"H2",{id:!0,"data-svelte-h":!0}),r(c)!=="svelte-yy1ofi"&&(c.textContent=E),B=o(e),m=s(e,"P",{"data-svelte-h":!0}),r(m)!=="svelte-15jfgif"&&(m.textContent=F),M=o(e),h=s(e,"P",{"data-svelte-h":!0}),r(h)!=="svelte-7e4qyg"&&(h.textContent=N),k=o(e),p=s(e,"P",{"data-svelte-h":!0}),r(p)!=="svelte-1jg3szy"&&(p.innerHTML=O),w=o(e),d=s(e,"H4",{"data-svelte-h":!0}),r(d)!=="svelte-17z44be"&&(d.textContent=G),_=o(e),f=s(e,"UL",{"data-svelte-h":!0}),r(f)!=="svelte-3c710t"&&(f.innerHTML=U),L=o(e),v=s(e,"H4",{"data-svelte-h":!0}),r(v)!=="svelte-1sjz3wk"&&(v.textContent=W),H=o(e),b=s(e,"UL",{"data-svelte-h":!0}),r(b)!=="svelte-1rs3114"&&(b.innerHTML=D),I=o(e),g=s(e,"H2",{id:!0,"data-svelte-h":!0}),r(g)!=="svelte-igr1mm"&&(g.textContent=$),z=o(e),x=s(e,"P",{"data-svelte-h":!0}),r(x)!=="svelte-1dazak7"&&(x.innerHTML=J),j=o(e),C=s(e,"H2",{"data-svelte-h":!0}),r(C)!=="svelte-12tp1zx"&&(C.textContent=Q),S=o(e),y=s(e,"P",{"data-svelte-h":!0}),r(y)!=="svelte-b1bnw3"&&(y.textContent=V),this.h()},h(){document.title="Beluga",R(u,"class","px-5 py-3 my-4 bg-light rounded-3 clearfix"),R(c,"id","overview"),R(g,"id","installation")},m(e,t){i(e,T,t),i(e,u,t),i(e,P,t),i(e,c,t),i(e,B,t),i(e,m,t),i(e,M,t),i(e,h,t),i(e,k,t),i(e,p,t),i(e,w,t),i(e,d,t),i(e,_,t),i(e,f,t),i(e,L,t),i(e,v,t),i(e,H,t),i(e,b,t),i(e,I,t),i(e,g,t),i(e,z,t),i(e,x,t),i(e,j,t),i(e,C,t),i(e,S,t),i(e,y,t)},p:q,i:q,o:q,d(e){e&&(a(T),a(u),a(P),a(c),a(B),a(m),a(M),a(h),a(k),a(p),a(w),a(d),a(_),a(f),a(L),a(v),a(H),a(b),a(I),a(g),a(z),a(x),a(j),a(C),a(S),a(y))}}}class re extends Z{constructor(T){super(),ee(this,T,null,ie,Y,{})}}export{re as component};
