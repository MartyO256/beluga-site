import{s as f,n as p}from"../chunks/scheduler.BRW4IjsR.js";import{S as i,i as d,s as m,H as y,x as l,k as h,d as c,f as u,o as v,g as o}from"../chunks/index.yRNBcVz4.js";const b=`<pre><code><span id="lf-type-nat" class="constant lf-type-constant">nat</span> : <span class="keyword keyword-type">type</span>.
<span id="lf-term-z" class="constant lf-term-constant">z</span> : <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>.
<span id="lf-term-succ" class="constant lf-term-constant">succ</span> : <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span> → <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>.

<span class="keyword keyword-rec">rec</span> <span id="theorem-add" class="constant computation-program">add</span> : ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) =
<span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">x</span> ⇒ <span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">y</span> ⇒
  <span class="keyword keyword-case">case</span> <span class="variable computation-variable">x</span> <span class="keyword keyword-of">of</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-z">z</a></span>] ⇒ <span class="variable computation-variable">y</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-succ">succ</a></span> <span class="variable meta-variable">N</span>] ⇒ <span class="keyword keyword-let">let</span> [ ⊢ <span class="variable meta-variable">R</span>] = <span class="constant computation-program"><a href="#theorem-add">add</a></span> [ ⊢ <span class="variable meta-variable">N</span>] <span class="variable computation-variable">y</span> <span class="keyword keyword-in">in</span> [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-succ">succ</a></span> <span class="variable meta-variable">R</span>];</code></pre>
`;function k(r){let s,n,t;return{c(){s=m(),n=new y(!1),t=l(),this.h()},l(a){h("svelte-dhl2hb",document.head).forEach(c),s=u(a),n=v(a,!1),t=l(),this.h()},h(){document.title="nat Example",n.a=t},m(a,e){o(a,s,e),n.m(b,a,e),o(a,t,e)},p,i:p,o:p,d(a){a&&(c(s),c(t),n.d())}}}class g extends i{constructor(s){super(),d(this,s,null,k,f,{})}}export{g as component};
