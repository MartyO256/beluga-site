import{s as i,n as l}from"../chunks/scheduler.BRW4IjsR.js";import{S as f,i as m,s as y,H as d,x as c,k as v,d as p,f as b,o as h,g as o}from"../chunks/index.yRNBcVz4.js";const k=`<pre><code><span id="lf-type-nat" class="constant lf-type-constant">nat</span> : <span class="keyword keyword-type">type</span>.
<span id="lf-term-z" class="constant lf-term-constant">z</span> : <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>.
<span id="lf-term-succ" class="constant lf-term-constant">succ</span> : <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span> → <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>.

<span class="keyword keyword-rec">rec</span> <span id="theorem-add" class="constant computation-program">add</span> : ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) =
<span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">x</span> ⇒ <span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">y</span> ⇒
  <span class="keyword keyword-case">case</span> <span class="variable computation-variable">x</span> <span class="keyword keyword-of">of</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-z">z</a></span>] ⇒ <span class="variable computation-variable">y</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-succ">succ</a></span> <span class="variable meta-variable">N</span>] ⇒ <span class="keyword keyword-let">let</span> [ ⊢ <span class="variable meta-variable">R</span>] = <span class="constant computation-program"><a href="#theorem-add">add</a></span> [ ⊢ <span class="variable meta-variable">N</span>] <span class="variable computation-variable">y</span> <span class="keyword keyword-in">in</span> [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-succ">succ</a></span> <span class="variable meta-variable">R</span>];

<span id="lf-type-list" class="constant lf-type-constant">list</span> : <span class="keyword keyword-type">type</span>.
<span id="lf-term-nil" class="constant lf-term-constant">nil</span> : <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span>.
<span id="lf-term-cons" class="constant lf-term-constant">cons</span> : <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span> → <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span> → <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span>.

<span class="keyword keyword-rec">rec</span> <span id="theorem-length" class="constant computation-program">length</span> : ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) =
<span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">l</span> ⇒
  <span class="keyword keyword-case">case</span> <span class="variable computation-variable">l</span> <span class="keyword keyword-of">of</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-nil">nil</a></span>] ⇒ [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-z">z</a></span>]
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-cons">cons</a></span> <span class="variable meta-variable">H</span> <span class="variable meta-variable">T</span>] ⇒ <span class="keyword keyword-let">let</span> [ ⊢ <span class="variable meta-variable">N</span>] = <span class="constant computation-program"><a href="#theorem-length">length</a></span> [ ⊢ <span class="variable meta-variable">T</span>] <span class="keyword keyword-in">in</span> [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-succ">succ</a></span> <span class="variable meta-variable">N</span>];

<span class="keyword keyword-rec">rec</span> <span id="theorem-map" class="constant computation-program">map</span> : (( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-nat">nat</a></span>)) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span>) → ( ⊢ <span class="constant lf-type-constant"><a href="#lf-type-list">list</a></span>) =
<span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">f</span> ⇒ <span class="keyword keyword-fn">fn</span> <span class="variable computation-variable">l</span> ⇒
  <span class="keyword keyword-case">case</span> <span class="variable computation-variable">l</span> <span class="keyword keyword-of">of</span>
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-nil">nil</a></span>] ⇒ [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-nil">nil</a></span>]
  | [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-cons">cons</a></span> <span class="variable meta-variable">H</span> <span class="variable meta-variable">T</span>] ⇒ <span class="keyword keyword-let">let</span> [ ⊢ <span class="variable meta-variable">R</span>] = <span class="variable computation-variable">f</span> [ ⊢ <span class="variable meta-variable">H</span>] <span class="keyword keyword-in">in</span> <span class="keyword keyword-let">let</span> [ ⊢ <span class="variable meta-variable">T'</span>] = <span class="constant computation-program"><a href="#theorem-map">map</a></span> <span class="variable computation-variable">f</span> [ ⊢ <span class="variable meta-variable">T</span>] <span class="keyword keyword-in">in</span>
    [ ⊢ <span class="constant lf-term-constant"><a href="#lf-term-cons">cons</a></span> <span class="variable meta-variable">R</span> <span class="variable meta-variable">T'</span>];</code></pre>
`;function w(r){let s,n,t;return{c(){s=y(),n=new d(!1),t=c(),this.h()},l(a){v("svelte-4zfri3",document.head).forEach(p),s=b(a),n=h(a,!1),t=c(),this.h()},h(){document.title="listnat Example",n.a=t},m(a,e){o(a,s,e),n.m(k,a,e),o(a,t,e)},p:l,i:l,o:l,d(a){a&&(p(s),p(t),n.d())}}}class _ extends f{constructor(s){super(),m(this,s,null,w,i,{})}}export{_ as component};
